#JSON# {"date":"27/08/2020 14:13:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"27/08/2020 14:13:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"27/08/2020 14:13:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 175ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"27/08/2020 14:13:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"27/08/2020 14:13:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 29ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"27/08/2020 14:13:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"27/08/2020 14:13:31.031","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:709157}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f47e9bb54beda2ebc90bf29', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"27/08/2020 14:13:31.031","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:709158}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f47e9bb54beda2ebc90bf28', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"27/08/2020 14:13:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"27/08/2020 14:13:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"27/08/2020 14:13:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:709159}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"27/08/2020 14:13:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:709160}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"27/08/2020 14:13:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"27/08/2020 14:13:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"27/08/2020 14:13:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"27/08/2020 14:13:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"27/08/2020 14:13:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"27/08/2020 14:13:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"27/08/2020 14:13:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"27/08/2020 14:13:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 14.438 seconds (JVM running for 15.37)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 18:41:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 18:41:41.041","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 18:41:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 554ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 18:41:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 18:41:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 199ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 18:41:43.043","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 18:41:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:881286}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4acb9ae5636c38c68d22f7', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 18:41:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:881289}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4acb9ae5636c38c68d22f8', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 18:41:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 18:41:49.049","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:881301}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 18:41:49.049","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 18:41:50.050","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:881317}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 18:41:54.054","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 18:41:54.054","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 18:41:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 18:41:58.058","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 18:41:59.059","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 18:42:01.001","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 18:42:02.002","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 18:42:02.002","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 29.087 seconds (JVM running for 31.999)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:02:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:02:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:02:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 566ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:02:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:02:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 97ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:02:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:02:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:882459}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad0806d2fd250fc6ee940', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:02:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:882458}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad07f6d2fd250fc6ee93f', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:02:41.041","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:02:41.041","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:882460}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:02:41.041","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:02:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:882461}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:02:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:02:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:02:46.046","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:02:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:02:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:02:49.049","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:02:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:02:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 22.269 seconds (JVM running for 24.412)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:04:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:04:19.019","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:04:20.020","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 459ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:04:20.020","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:04:20.020","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 109ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:04:21.021","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:04:24.024","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:882519}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad0e872923a46dd46bb5b', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:04:24.024","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:882520}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad0e772923a46dd46bb5a', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:04:26.026","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:882522}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:04:26.026","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:882524}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:04:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:04:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:04:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:04:33.033","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:04:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"\r\n\r\nError starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener"}
#JSON# {"date":"29/08/2020 19:04:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Closed connection [connectionId{localValue:4, serverValue:882524}] to 10.2.166.153:27002 because the pool has been closed.","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:04:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Closed connection [connectionId{localValue:3, serverValue:882522}] to 10.2.166.153:27002 because the pool has been closed.","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:04:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"\r\n\r\n***************************\r\nAPPLICATION FAILED TO START\r\n***************************\r\n\r\nDescription:\r\n\r\nWeb server failed to start. Port 8080 was already in use.\r\n\r\nAction:\r\n\r\nIdentify and stop the process that's listening on port 8080 or configure this application to listen on another port.\r\n","log_level":"ERROR","thread_name":"main","class":"org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter"}
#JSON# {"date":"29/08/2020 19:05:01.001","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:05:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 435ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 104ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:04.004","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:05:07.007","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:882550}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad113e1ebc305dca5b26d', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:07.007","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:882551}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad112e1ebc305dca5b26c', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:05:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:882553}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:05:09.009","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:882554}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:11.011","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:05:11.011","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:05:13.013","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:05:15.015","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:05:16.016","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:05:18.018","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:05:19.019","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:05:19.019","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 22.995 seconds (JVM running for 25.909)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:05:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:05:50.050","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 484ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 152ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:05:52.052","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:05:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:882613}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad143bc734a6f3130ea84', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:882614}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad142bc734a6f3130ea83', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:05:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:882616}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:05:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:05:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:882617}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:06:00.000","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:06:00.000","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:06:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:06:04.004","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:06:05.005","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:06:07.007","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:06:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:06:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 24.551 seconds (JVM running for 27.474)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:08:12.012","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:08:14.014","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:08:14.014","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 381ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:08:14.014","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:08:14.014","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 134ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:08:15.015","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:08:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:882793}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad1d17a605d1f47b2553a', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:08:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:882794}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad1d07a605d1f47b25539', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:08:18.018","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:08:18.018","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:882795}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:08:18.018","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"29/08/2020 19:08:19.019","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:882796}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:08:21.021","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:08:21.021","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:08:23.023","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:08:24.024","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:08:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:08:27.027","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:08:28.028","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:08:28.028","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 19.318 seconds (JVM running for 21.378)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:08:33.033","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1e1763fbe400e8b9dcb6dd94ef3","spanId":"0e8b9dcb6dd94ef3","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"0e8b9dcb6dd94ef3","X-B3-TraceId":"5f4ad1e1763fbe400e8b9dcb6dd94ef3","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:08:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1e6d35a9276fe5b6a8513c625ef","spanId":"fe5b6a8513c625ef","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"fe5b6a8513c625ef","X-B3-TraceId":"5f4ad1e6d35a9276fe5b6a8513c625ef","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:08:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1e7bf0d3abe56fdd928c2690c6f","spanId":"56fdd928c2690c6f","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"56fdd928c2690c6f","X-B3-TraceId":"5f4ad1e7bf0d3abe56fdd928c2690c6f","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:08:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1e871d60e0a4e0976aa42c9ec53","spanId":"4e0976aa42c9ec53","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"4e0976aa42c9ec53","X-B3-TraceId":"5f4ad1e871d60e0a4e0976aa42c9ec53","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:08:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1e801aa2284df571a4c7f6c5f8a","spanId":"df571a4c7f6c5f8a","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"df571a4c7f6c5f8a","X-B3-TraceId":"5f4ad1e801aa2284df571a4c7f6c5f8a","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:08:41.041","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1e9e740060f83f2ad626f64d61c","spanId":"83f2ad626f64d61c","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"83f2ad626f64d61c","X-B3-TraceId":"5f4ad1e9e740060f83f2ad626f64d61c","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:08:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad1ea3a3aaafbde259c4b2836bbe2","spanId":"de259c4b2836bbe2","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"de259c4b2836bbe2","X-B3-TraceId":"5f4ad1ea3a3aaafbde259c4b2836bbe2","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:09:33.033","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Erro ao criar WebApi","traceId":"5f4ad21da18774abf826f82462b0d0a7","spanId":"f826f82462b0d0a7","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"f826f82462b0d0a7","X-B3-TraceId":"5f4ad21da18774abf826f82462b0d0a7","uid":"","integration-name":"","log_level":"ERROR","thread_name":"nioEventLoopGroup-2-2","class":"br.com.b2sky.infra.controller.WebApiController","throwable":{"stacktrace":"at br.com.b2sky.infra.api.WebApiService.apiNotFound(WebApiService.java:115)\nat br.com.b2sky.infra.api.WebApiService.getByName(WebApiService.java:110)\nat java.util.Optional.map(Unknown Source)\nat br.com.b2sky.infra.controller.WebApiController.get(WebApiController.java:64)\nat br.com.b2sky.infra.controller.WebApiController.getByName(WebApiController.java:54)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:147)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\nat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\nat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\nat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2317)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2125)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1999)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\nat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)\nat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\nat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)\nat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)\nat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\nat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat org.springframework.cloud.sleuth.instrument.web.TraceWebFilter$MonoWebFilterTrace.subscribe(TraceWebFilter.java:165)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\nat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\nat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\nat reactor.netty.http.server.HttpServerHandle.onStateChange(HttpServerHandle.java:64)\nat reactor.netty.tcp.TcpServerBind$ChildObserver.onStateChange(TcpServerBind.java:262)\nat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:465)\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:170)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Unknown Source)","exception_class":"br.com.b2sky.infra.api.WebApiNotFoundException","exception_message":"404 NOT_FOUND \"Api nÃ£o encontrada\""}}
#JSON# {"date":"29/08/2020 19:10:46.046","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:10:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:10:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 367ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:10:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:10:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 98ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:10:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:10:50.050","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:882912}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad26a057c404e7615d7b9', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:10:50.050","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:882913}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad269057c404e7615d7b8', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:10:53.053","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:10:53.053","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:10:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:10:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:10:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:10:59.059","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:11:00.000","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:11:00.000","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 18.341 seconds (JVM running for 20.276)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:11:13.013","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:882923}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:25:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:25:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:25:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 404ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:25:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:25:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 119ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:25:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:25:53.053","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:25:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:25:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 13.517 seconds (JVM running for 15.814)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:27:14.014","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:27:16.016","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:27:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 569ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:27:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:27:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 190ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"29/08/2020 19:27:18.018","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"29/08/2020 19:27:24.024","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"29/08/2020 19:27:27.027","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"29/08/2020 19:27:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:27:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"29/08/2020 19:27:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 18.412 seconds (JVM running for 20.454)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"29/08/2020 19:27:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:883830}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad648f81fa06fad0b4dbf', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:27:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:883831}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-3","class":"org.mongodb.driver.connection"}
#JSON# {"date":"29/08/2020 19:27:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:5, serverValue:883840}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5f4ad649f81fa06fad0b4dc0', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:24:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: hmg","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:24:49.049","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:24:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 1333ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:24:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:24:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 108ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:24:54.054","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"20/11/2020 11:24:59.059","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:1208481}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d1bac56fce6722b2eb71', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:25:00.000","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:1208482}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d1bcc56fce6722b2eb72', description='null'}-10.2.166.153:27002","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:25:01.001","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:25:02.002","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:1208484}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"nioEventLoopGroup-2-2","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:25:02.002","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:25:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:1208485}] to 10.2.166.153:27002","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:25:06.006","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:25:06.006","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"20/11/2020 11:25:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:25:10.010","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:25:11.011","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"20/11/2020 11:25:12.012","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:25:13.013","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:25:13.013","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 41.181 seconds (JVM running for 50.1)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:33:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: prd","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:33:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:33:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 305ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:33:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:33:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 71ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:33:49.049","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"20/11/2020 11:33:52.052","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:15364}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d3cf5c815955e38b49cd', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:33:52.052","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:23780}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d3cf5c815955e38b49cd', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:33:52.052","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:23781}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d3d05c815955e38b49ce', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:33:52.052","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:15365}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d3d05c815955e38b49ce', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:33:53.053","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:33:53.053","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:5, serverValue:23782}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-3","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:33:54.054","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:33:54.054","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:6, serverValue:23783}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:33:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:33:57.057","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"20/11/2020 11:33:59.059","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:34:00.000","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:34:01.001","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"20/11/2020 11:34:02.002","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:34:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:34:03.003","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 23.683 seconds (JVM running for 25.002)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:34:17.017","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:7, serverValue:15366}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-4","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:50.050","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: prd","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:48:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:48:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 215ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:48:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:48:51.051","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 99ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:48:52.052","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"20/11/2020 11:48:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:15430}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d75636892707ffbed1bc', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:23900}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d75636892707ffbed1bc', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:23901}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d75736892707ffbed1bd', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:55.055","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:15431}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d75736892707ffbed1bd', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:48:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:5, serverValue:23902}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-3","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:48:56.056","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:6, serverValue:23903}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:48:59.059","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:48:59.059","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"20/11/2020 11:49:01.001","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:02.002","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:04.004","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"\r\n\r\nError starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener"}
#JSON# {"date":"20/11/2020 11:49:04.004","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Closed connection [connectionId{localValue:6, serverValue:23903}] to 10.13.102.18:28006 because the pool has been closed.","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:04.004","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Closed connection [connectionId{localValue:5, serverValue:23902}] to 10.13.102.18:28006 because the pool has been closed.","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:08.008","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"\r\n\r\n***************************\r\nAPPLICATION FAILED TO START\r\n***************************\r\n\r\nDescription:\r\n\r\nWeb server failed to start. Port 8080 was already in use.\r\n\r\nAction:\r\n\r\nIdentify and stop the process that's listening on port 8080 or configure this application to listen on another port.\r\n","log_level":"ERROR","thread_name":"main","class":"org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter"}
#JSON# {"date":"20/11/2020 11:49:35.035","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: prd","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:49:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:49:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 265ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:49:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:49:36.036","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 73ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:49:37.037","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:23912}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d78245e1ff4158e5b1f1', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:15434}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d78245e1ff4158e5b1f1', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:15435}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d78245e1ff4158e5b1f0', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:23913}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d78245e1ff4158e5b1f0', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:5, serverValue:23914}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-3","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:39.039","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:49:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:6, serverValue:23915}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:49:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"20/11/2020 11:49:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:45.045","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:46.046","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"20/11/2020 11:49:47.047","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:49:48.048","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 16.619 seconds (JVM running for 17.689)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:51:18.018","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:7, serverValue:15445}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-4","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: prd","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:54:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:54:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 287ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:54:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:54:31.031","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 87ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 11:54:31.031","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"20/11/2020 11:54:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:23967}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d8a91bd4594b7cf780ca', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:15461}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d8a91bd4594b7cf780ca', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:23968}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d8aa1bd4594b7cf780cb', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:15462}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7d8aa1bd4594b7cf780cb', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:54:35.035","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:5, serverValue:23969}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-3","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:35.035","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 11:54:35.035","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:6, serverValue:23970}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:54:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:54:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"20/11/2020 11:54:40.040","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:54:41.041","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:54:42.042","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"20/11/2020 11:54:43.043","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:54:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 11:54:44.044","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 18.786 seconds (JVM running for 20.095)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 11:55:29.029","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:7, serverValue:15467}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-4","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 11:56:45.045","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Http Event encontrado","traceId":"5fb7d92d33f8597925f46451d71fd7ca","spanId":"25f46451d71fd7ca","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"25f46451d71fd7ca","id":"5fb7d49ba9307c6bb8fe1a04ab6533db","X-B3-TraceId":"5fb7d92d33f8597925f46451d71fd7ca","uid":"","integration-name":"","log_level":"INFO","thread_name":"nioEventLoopGroup-2-4","class":"br.com.b2sky.infra.service.HttpEventService"}
#JSON# {"date":"20/11/2020 12:04:20.020","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"The following profiles are active: prd","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 12:04:21.021","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 12:04:22.022","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 277ms. Found 2 MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 12:04:22.022","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 12:04:22.022","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Finished Spring Data repository scanning in 84ms. Found 9 Reactive MongoDB repository interfaces.","log_level":"INFO","thread_name":"main","class":"org.springframework.data.repository.config.RepositoryConfigurationDelegate"}
#JSON# {"date":"20/11/2020 12:04:23.023","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"BeanFactory id=ccfc624f-e3dd-398d-8584-14409d633ce5","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.context.scope.GenericScope"}
#JSON# {"date":"20/11/2020 12:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:4, serverValue:15511}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7daf86910c566c6cd5212', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:3, serverValue:24072}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7daf86910c566c6cd5212', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:2, serverValue:24073}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7daf86910c566c6cd5211', description='null'}-10.13.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:1, serverValue:15512}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"cluster-ClusterId{value='5fb7daf86910c566c6cd5211', description='null'}-10.3.102.18:28006","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.ReactiveMongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 12:04:25.025","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:5, serverValue:24074}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-3","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:26.026","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.\r\n\tPlease use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.\r\n\tHowever, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.\r\n\r\n\t> -----------------------------------------------------------------------------------------\r\n\t> @EventListener(ApplicationReadyEvent.class)\r\n\t> public void initIndicesAfterStartup() {\r\n\t>\r\n\t>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);\r\n\t>\r\n\t>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);\r\n\t>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);\r\n\t> }\r\n\t> -----------------------------------------------------------------------------------------\r\n","log_level":"WARN","thread_name":"main","class":"org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator"}
#JSON# {"date":"20/11/2020 12:04:26.026","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:6, serverValue:24075}] to 10.13.102.18:28006","log_level":"INFO","thread_name":"main","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:28.028","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 12:04:28.028","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Exposing 2 endpoint(s) beneath base path ''","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"}
#JSON# {"date":"20/11/2020 12:04:30.030","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 12:04:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 12:04:32.032","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Netty started on port(s): 8080","log_level":"INFO","thread_name":"main","class":"org.springframework.boot.web.embedded.netty.NettyWebServer"}
#JSON# {"date":"20/11/2020 12:04:34.034","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 12:04:35.035","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Cannot determine local hostname","log_level":"INFO","thread_name":"main","class":"org.springframework.cloud.commons.util.InetUtils"}
#JSON# {"date":"20/11/2020 12:04:35.035","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Started ManagerApplication in 18.132 seconds (JVM running for 19.432)","log_level":"INFO","thread_name":"main","class":"br.com.b2sky.infra.ManagerApplication"}
#JSON# {"date":"20/11/2020 12:04:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.0.0","environment":"dev","brand":"b2sky","log_message":"Opened connection [connectionId{localValue:7, serverValue:15523}] to 10.3.102.18:28006","log_level":"INFO","thread_name":"nioEventLoopGroup-2-4","class":"org.mongodb.driver.connection"}
#JSON# {"date":"20/11/2020 12:04:38.038","hostname":"LAPTOP-ABBOCRK2","application":"b2sky-manager","version":"1.5.0.M2","environment":"dev","brand":"b2sky","log_message":"Http Event encontrado","traceId":"5fb7db062a339ccd8bda56d7961d5104","spanId":"8bda56d7961d5104","spanExportable":true,"X-Span-Export":true,"X-B3-SpanId":"8bda56d7961d5104","id":"5fb7d4a269d9891a2b982cac3bf31dc7","X-B3-TraceId":"5fb7db062a339ccd8bda56d7961d5104","uid":"","integration-name":"","log_level":"INFO","thread_name":"nioEventLoopGroup-2-4","class":"br.com.b2sky.infra.service.HttpEventService"}
